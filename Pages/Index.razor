@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

    <label style="margin-bottom: 2rem;">
        Language:
        <select @onchange="@((ChangeEventArgs __e) => {languageInput = __e?.Value?.ToString(); UpdateTranslation();})">
            <option value="none">None</option>
            <option value="JA">Japanese</option>
            <option value="SV">Swedish</option>
            <option value="EN">English</option>
        </select>
    </label>
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>

<div class="form-group">
</div>

<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@($"{message.timestamp} {message.user}: {message.message}")</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private string? userInput;
    private string? messageInput;
    private string languageInput = "none";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", async (user, message, timestamp) =>
        {
            if (languageInput != "none") {
                TranslationResponse translation = await Translate(message, languageInput);

                message = translation.Translations[0].Text;
            }

            Message newMessage = new Message(user, message, timestamp);

            messages.Add(newMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            

            DateTime currentTime = DateTime.Now;

            string timestamp = currentTime.ToLocalTime().ToShortDateString() + " " + currentTime.ToLocalTime().ToShortTimeString();

            await hubConnection.SendAsync("SendMessage", userInput, messageInput, timestamp);
        }
    }

    private async Task<TranslationResponse> Translate(string message, string language){
        var request = new HttpRequestMessage(HttpMethod.Post,
            "https://api-free.deepl.com/v2/translate?text="+ message+"&target_lang="+language);

        request.Headers.Add("Authorization", "DeepL-Auth-Key 3f9bc828-eaec-f58f-aba8-49f755e54c4e:fx");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            string res = await response.Content.ReadAsStringAsync();
            Console.WriteLine(res);
            return JsonSerializer.Deserialize<TranslationResponse>(res);
        }

        return new TranslationResponse();
    }

    public async void UpdateTranslation() {

        for(int i = 0; i < messages.Count; i++) {
            TranslationResponse translation = await Translate(messages[i].message, languageInput);
            messages[i].message = translation.Translations[0].Text;
            Console.WriteLine(translation.Translations[0].Text);
            Console.WriteLine(messages[i].message);
        }

        InvokeAsync(StateHasChanged);
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class TranslationResponse
    {
        [JsonPropertyName("translations")]
        public List<Translation>? Translations { get; set; }
    }

    public class Translation
    {
        [JsonPropertyName("detected_source_language")]
        public string? Language { get; set; }

        [JsonPropertyName("text")]
        public string? Text { get; set; }
    }

    public class Message
    {
        public Message(string user, string message, string timestamp) {
            this.user = user;
            this.message = message;
            this.timestamp = timestamp;
        }

        public string user;

        public string message;

        public string timestamp;

        public override string ToString()
        {
            return $"";
        }
    
    }
}