@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>
<div class="username-input" hidden="@(hasSelectedName)">
    <form @onsubmit="SetUsername" @onsubmit:preventDefault>
        <label>
            Username:
            <input @bind="userInput" required />
        </label>
        <button type="submit">Submit</button>
    </form>
</div>

<div hidden="@(!hasSelectedName)">
    <div>
        <label>
            Group:
            <select @bind="groupInput">
                <option value="general">General Chat</option>
                <option value="japanse">Japanese Chat</option>
                <option value="english">English Chat</option>
            </select>
        </label>
    </div>

    <label style="margin-bottom: 2rem;">
        Language To Translate To:
        <select @onchange="@((ChangeEventArgs __e) => {languageInput = __e?.Value?.ToString(); UpdateTranslation();})">
            <option value="none">None</option>
            <option value="JA">Japanese</option>
            <option value="SV">Swedish</option>
            <option value="EN">English</option>
        </select>
    </label>

    <form class="form-group" @onsubmit="Send" @onsubmit:preventDefault disabled="@(!IsConnected)">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>

        <button type="submit" class="send-button">✉️</button>
    </form>

    <hr>

    <div id="messagesList">
        @foreach (var message in messages.FindAll((message) => message.groupName == groupInput))
        {
            <div class="message-container">
                <div class="message-header">
                    <span>@($"{message.user}: {message.message}")</span>
                    <span class="message-timestamp">@message.timestamp</span>
                </div>
                <div>
                    <select @bind="message.currentSelectedReaction">
                        <option value="none"></option>
                        <option value="😁">😁</option>
                        <option value="🤬">🤬</option>
                        <option value="😱">😱</option>
                    </select>
                    <button @onclick="(MouseEventArgs e) => SendReaction(message)">+</button>
                </div>
                <p>
                    @foreach (var reaction in message.getUniqueReactions())
                    {
                        <span class="reaction"><span>@reaction</span><span>@message.getReactionCount(reaction)</span>
                            <span class="reactionSenders">
                                @string.Join(", ", message.getReactionSenders(reaction))
                            </span>
                        </span>
                    }
                </p>
            </div>
        }
    </div>
</div>

<style>
    .username-input {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 3rem;
        background-color: black;
        color: white;
    }

    .reactionSenders {
        display: none;
        position: absolute;
        margin-top: 1.5rem;
        margin-left: -2.5rem;
        font-size: 1rem;
    }

    .send-button {
        background-color: #0080FF;
        border: 1px solid black;
        border-radius: 3px;
        min-width: 3rem;
    }

    .reaction:hover>.reactionSenders {
        display: inline;
    }

    #messagesList {
        list-style: none;
        padding-left: 0;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
    }

    .message-timestamp {
        font-size: 0.8rem;
        padding-right: 0.7rem;
    }

    .message-container {
        // layout
        position: relative;
        max-width: 30em;

        // looks
        background-color: #fff;
        padding: 0.5rem 0 1.125em 1.5em;
        font-size: 1.25em;
        border-radius: 1rem;
        box-shadow: 0 0.125rem 0.5rem rgba(0, 0, 0, .3), 0 0.0625rem 0.125rem rgba(0, 0, 0, .2);

        margin: 1rem;
        margin-left: 0;
    }

    .message-container::before {
        // layout
        content: '';
        position: absolute;
        width: 0;
        height: 0;
        bottom: 100%;
        left: 1.5em; // offset should move with padding of parent
        border: .75rem solid transparent;
        border-top: none;

        // looks
        border-bottom-color: #fff;
        filter: drop-shadow(0 -0.0625rem 0.0625rem rgba(0, 0, 0, .1));
    }
</style>

@code {
    private HubConnection? hubConnection;
    private List<Message> messages = new List<Message>();
    private string? userInput;
    private string? messageInput;
    private string languageInput = "none";
    private string reactionInput = "none";
    private string groupInput = "general";
    private bool hasSelectedName = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string, string, string, string>("ReceiveMessage", async (user, message, timestamp, group, id)
        =>
        {
            if (languageInput != "none")
            {
                TranslationResponse translation = await Translate(message, languageInput);

                message = translation.Translations[0].Text;
            }

            Message newMessage = new Message(user, message, timestamp, group, id);

            messages.Add(newMessage);
            InvokeAsync(StateHasChanged);
        });

        HubConnectionExtensions.On<string, string, string>(hubConnection, "ReceiveReaction", (reaction, messageId, user) =>
        {
            for (int i = 0; i < messages.Count; i++)
            {
                if (messages[i].id == messageId)
                {
                    messages[i].reactions.Add(new Reaction(reaction, user));
                }
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null && !String.IsNullOrWhiteSpace(messageInput))
        {

            DateTime currentTime = DateTime.Now;

            string timestamp = currentTime.ToLocalTime().ToShortDateString() + " " + currentTime.ToLocalTime().ToShortTimeString();

            Random generator = new();

            await hubConnection.SendAsync("SendMessage", userInput, messageInput, timestamp, groupInput,
            generator.Next(10000).ToString());
        }
    }

    private async void SendReaction(Message message)
    {
        Console.WriteLine(message.currentSelectedReaction);
        if (hubConnection != null && message.currentSelectedReaction != "none")
        {
            await hubConnection.SendAsync("SendReaction", message.currentSelectedReaction, message.id, userInput);

        }
    }

    private async Task<TranslationResponse> Translate(string message, string language)
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
        "https://api-free.deepl.com/v2/translate?text=" + message + "&target_lang=" + language);

        request.Headers.Add("Authorization", "DeepL-Auth-Key 3f9bc828-eaec-f58f-aba8-49f755e54c4e:fx");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            string res = await response.Content.ReadAsStringAsync();
            Console.WriteLine(res);
            return JsonSerializer.Deserialize<TranslationResponse>(res);
        }

        return new TranslationResponse();
    }

    public async void UpdateTranslation()
    {

        if (languageInput == "none")
        {
            return;
        }

        for (int i = 0; i < messages.Count; i++)
        {
            TranslationResponse translation = await Translate(messages[i].message, languageInput);
            messages[i].message = translation.Translations[0].Text;
            Console.WriteLine(translation.Translations[0].Text);
            Console.WriteLine(messages[i].message);
        }

        InvokeAsync(StateHasChanged);
    }

    public void SetUsername()
    {
        if (userInput != "")
        {
            hasSelectedName = true;
        }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class TranslationResponse
    {
        [JsonPropertyName("translations")]
        public List<Translation>? Translations { get; set; }
    }

    public class Translation
    {
        [JsonPropertyName("detected_source_language")]
        public string? Language { get; set; }

        [JsonPropertyName("text")]
        public string? Text { get; set; }
    }

    public class Message
    {
        public Message(string user, string message, string timestamp, string group, string id = "")
        {
            Random generator = new Random();
            this.user = user;
            this.message = message;
            this.timestamp = timestamp;
            this.groupName = group;

            if (id == "")
            {
                this.id = generator.Next(100000).ToString();
            }

            this.id = id;
        }

        public string id;

        public string user;

        public string message;

        public string timestamp;

        public string groupName;

        public string currentSelectedReaction = "none";

        public List<Reaction> reactions = new();

        public List<string> getUniqueReactions()
        {
            List<string> uniqueReactions = new();

            for (int i = 0; i < reactions.Count; i++)
            {
                if (!uniqueReactions.Contains(reactions[i].reactionString))
                {
                    uniqueReactions.Add(reactions[i].reactionString);
                }
            }

            return uniqueReactions;
        }

        public int getReactionCount(string reaction)
        {
            int count = 0;

            for (int i = 0; i < reactions.Count; i++)
            {
                if (reactions[i].reactionString == reaction)
                {
                    count++;
                }
            }

            return count;
        }

        public List<string> getReactionSenders(string reaction)
        {
            List<string> uniqueSenders = new();

            for (int i = 0; i < reactions.Count; i++)
            {
                if (!uniqueSenders.Contains(reactions[i].sender) && reactions[i].reactionString == reaction)
                {
                    uniqueSenders.Add(reactions[i].sender);
                }
            }

            return uniqueSenders;
        }

        public override string ToString()
        {
            return $"";
        }

    }

    public class Reaction
    {
        public Reaction(string reaction, string user)
        {
            reactionString = reaction;
            sender = user;
        }

        public string reactionString;

        public string sender;

    }
}